# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawProxyClient, RawProxyClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProxyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProxyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProxyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProxyClient
        """
        return self._raw_client

    def get(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        from pipedream import Pipedream

        client = Pipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.proxy.get(
            project_id="project_id",
            url_64="url_64",
            external_user_id="external_user_id",
            account_id="account_id",
        )
        """
        _response = self._raw_client.get(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request_options=request_options,
        )
        return _response.data

    def post(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        from pipedream import Pipedream

        client = Pipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.proxy.post(
            project_id="project_id",
            url_64="url_64",
            external_user_id="external_user_id",
            account_id="account_id",
            request={"key": "value"},
        )
        """
        _response = self._raw_client.post(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data

    def put(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        from pipedream import Pipedream

        client = Pipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.proxy.put(
            project_id="project_id",
            url_64="url_64",
            external_user_id="external_user_id",
            account_id="account_id",
            request={"key": "value"},
        )
        """
        _response = self._raw_client.put(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data

    def delete(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        from pipedream import Pipedream

        client = Pipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.proxy.delete(
            project_id="project_id",
            url_64="url_64",
            external_user_id="external_user_id",
            account_id="account_id",
        )
        """
        _response = self._raw_client.delete(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request_options=request_options,
        )
        return _response.data

    def patch(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        from pipedream import Pipedream

        client = Pipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.proxy.patch(
            project_id="project_id",
            url_64="url_64",
            external_user_id="external_user_id",
            account_id="account_id",
            request={"key": "value"},
        )
        """
        _response = self._raw_client.patch(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data


class AsyncProxyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProxyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProxyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProxyClient
        """
        return self._raw_client

    async def get(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        import asyncio

        from pipedream import AsyncPipedream

        client = AsyncPipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.proxy.get(
                project_id="project_id",
                url_64="url_64",
                external_user_id="external_user_id",
                account_id="account_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request_options=request_options,
        )
        return _response.data

    async def post(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        import asyncio

        from pipedream import AsyncPipedream

        client = AsyncPipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.proxy.post(
                project_id="project_id",
                url_64="url_64",
                external_user_id="external_user_id",
                account_id="account_id",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data

    async def put(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        import asyncio

        from pipedream import AsyncPipedream

        client = AsyncPipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.proxy.put(
                project_id="project_id",
                url_64="url_64",
                external_user_id="external_user_id",
                account_id="account_id",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.put(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data

    async def delete(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        import asyncio

        from pipedream import AsyncPipedream

        client = AsyncPipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.proxy.delete(
                project_id="project_id",
                url_64="url_64",
                external_user_id="external_user_id",
                account_id="account_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request_options=request_options,
        )
        return _response.data

    async def patch(
        self,
        project_id: str,
        url_64: str,
        *,
        external_user_id: str,
        account_id: str,
        request: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        project_id : str
            The project ID, which starts with 'proj_'.

        url_64 : str
            Base64-encoded target URL

        external_user_id : str
            The external user ID for the proxy request

        account_id : str
            The account ID to use for authentication

        request : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            proxy request successful

        Examples
        --------
        import asyncio

        from pipedream import AsyncPipedream

        client = AsyncPipedream(
            x_pd_environment="YOUR_X_PD_ENVIRONMENT",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.proxy.patch(
                project_id="project_id",
                url_64="url_64",
                external_user_id="external_user_id",
                account_id="account_id",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch(
            project_id,
            url_64,
            external_user_id=external_user_id,
            account_id=account_id,
            request=request,
            request_options=request_options,
        )
        return _response.data
